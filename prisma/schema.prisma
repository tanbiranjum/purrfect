// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updateAt      DateTime  @updatedAt
  favoriteIds   String[]  @db.ObjectId

  accounts             Account[]
  Pet                  Pet[]
  AddoptionApplication AdoptionApplication[]
  AdoptionHistory      AdoptionHistory[]
}

model Account {
  id                       String  @id @default(auto()) @map("_id") @db.ObjectId
  userId                   String  @db.ObjectId
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.String
  refresh_token_expires_in Int?
  access_token             String  @db.String
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.String
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Pet {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String?
  age       Int
  gender    Gender
  imageSrc  String?
  adopted   Boolean  @default(false)
  createdAt DateTime @default(now())

  ownerId String? @db.ObjectId
  owner   User?   @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  //  Adoption Application
  adoptionApplication AdoptionApplication?

  adoptionHistory       AdoptionHistory[]
  adoptionApplicationId String?           @db.ObjectId
}

model AdoptionApplication {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String?
  email     String?
  phone     String?
  createdAt DateTime @default(now())
  Pet       Pet?     @relation(fields: [petId], references: [id], onDelete: Cascade)
  petId     String?  @unique @db.ObjectId

  applicant   User   @relation(fields: [applicantId], references: [id])
  applicantId String @db.ObjectId
}

model AdoptionHistory {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  adopted   Boolean  @default(false)
  adoptedAt DateTime @default(now())
  Pet       Pet?     @relation(fields: [petId], references: [id])
  petId     String?  @db.ObjectId

  adoptedBy   User   @relation(fields: [adoptedById], references: [id])
  adoptedById String @db.ObjectId
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Gender {
  male
  female
  unknown
}
